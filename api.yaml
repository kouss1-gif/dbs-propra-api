openapi: 3.0.2
info:
  title: DBS Programmierpraktikum - Phase 4 - API-Spezifikation
  description: >-
    In der folgenden Liste finden Sie die <b>für die Anwendergruppen
    spezifischen Grundfunktionalitäten</b>. Es müssen <b>alle folgenden
    allgemeinen Bedingungen</b> eingehalten werden: <ul>
      <li><font color="red"><b>Wichtiger allgemeiner Hinweis:</b> Beachten Sie unbedingt die Benennung der Form-Parameter, Query-Parameter sowie die der Ergebnistupel. Bei Abweichungen von in der API angegebenen Benennungen wird der entsprechende Endpunkt als <u><b>falsch</b></u> bewertet.</font></li>
      <li><b>Bei einer gültigen <code>GET</code>-Anfrage wird ein JSON-Array von JSON-Objekten, wobei ein JSON-Objekt eine Entität darstellt, zurückgegeben</b> und dies mit einem Code <code>200</code> belegt. Wird die <code>GET</code>-Anfrage auf einer nicht vorhandenen Ressource ausgeführt, so wird mit Code <code>404</code> geantwortet. Ist die Ressource woanders zu finden, wird dies mit dem Code <code>301</code> und dem Link im Header belegt. Eine <code>GET</code>-Anfrage auf einer Ressource, die eine Sammlung von Entitäten darstellt, kann durch Übergabe von bestimmten Parametern und dazugehörigen Werten <b>case-insensitive gefiltert</b> werden. Dabei muss jede Entität in der Sammlung allen Parametern gleichzeitig genügen. Die Sammlung wird in der Antwort in ein JSON-Array gekapselt.</li>
      <li><b>Bei <code>POST</code>-Anfragen werden alle Parameter bis auf diejenigen Parameter der entsprechenden Ressource benötigt, die Standardwerte besitzen.</b> Wird die <code>POST</code>-Anfrage auf einer nicht vorhandenen Ressource ausgeführt, so wird mit Code <code>404</code> geantwortet. Ist die Ressource woanders zu finden, wird dies mit dem Code <code>301</code> und dem Link im Header belegt. Ist die Ressource vorhanden, aber die Anfragen wegen irgendeiner anderen Sache (ungültige Werte, zu wenig Parameter, ...) ungültig, so wird dies mit einem Code <code>400</code> beantwortet, ansonsten mit Code <code>201</code> und dem Link zur neuen Ressource im Header belegt (<b>Wichtiger Hinweis:</b> Sollte ein spezifischer Endpunkt in unserer API nicht vorhanden sein, kann eine fiktive Location zurückgegeben werden. Beispiel: ".../endpunkt/{id}", wobei {id} die <b>RowID</b> der neu angelegten Ressource ist).</li>
      <li><b>Bei <code>PATCH</code>-Anfragen werden nur diejenigen Parameter benötigt, die geändert werden sollen, folglich mindestens einer.</b> Wird die <code>PATCH</code>-Anfrage auf einer nicht vorhandenen Ressource ausgeführt, so wird mit Code <code>404</code> geantwortet. Ist die Ressource vorhanden, aber die Anfragen wegen irgendeiner anderen Sache (ungültige Werte, ...) ungültig, so wird dies mit einem Code <code>400</code> beantwortet, anonsten mit Code <code>204</code> belegt.</li>
      <li><b>Bei einer gültigen <code>DELETE</code>-Anfrage wird der Code <code>204</code> zurückgegeben.</b> Ist die Ressource nicht vorhanden, wird dies mit Code <code>404</code> belegt.</li>
      <li><b>Bereiche mit einem Schlosssymbol werden durch eine HTTP-Basisauthentifizierung abgesichert.</b> Wird einer dieser Bereiche ohne oder mit falschen Anmeldedaten aufgerufen, so wird dies mit einem <code>401</code> und dem Header <code>WWW-Authenticate</code> belegt. Sind die Anmeldedaten richtig, aber der Anwender ist nicht authorisiert, so wird dies mit einem Code <code>403</code> belegt.</li>
      <li><b>In Antworten mit Code <code>4xx</code> wird ein JSON-Objekt, das mindestens den Schlüssel <code>"message"</code> mit dem Wert <code>&lt;Fehlermeldung&gt;</code> enthält, zurückgegeben</b>, wobei <code>&lt;Fehlermeldung&gt;</code> eine für den Umstand entsprechende Fehlermeldung ist. Bei einer auftretenden Exception reicht dafür die Nachricht dieser.</li>
      <li><b>Antworten auf gültige <code>POST</code>- und <code>PATCH</code>-Anfragen beinhalten nichts.</b></li>
      <li><b>Anfragen sind vom Typ <code>multipart/form-data</code>, Antworten sind vom Typ <code>application/json;charset=UTF-8</code>.</b></li>
      <li><b>Datums- und Zeitangaben werden im entsprechenden Standard-SQL-Format übertragen</b> (sowohl in der Anfrage, als auch in der Antwort).</li>
      <li><b>Passwörter werden der Einfachheit halber im Klartext übergeben.</b></li>
      <li><b><u>Die erwähnten bzw. alle IDs sind RowIDs!!!</u></b></li>
    </ul>
  version: 2022.SoSe.1
servers:
  - url: 'http://localhost:8080'
paths:
  /nutzer:
    get:
      tags:
        - Anwender
      summary: Gibt Nutzer zurück.
      description: 
        Alle **Nutzer** werden zurückgegeben. Falls Query-Parameter mit Werten
        angegeben wurden, wird die Rückgabe noch entsprechend gefiltert.
      parameters:
        - name: email
          in: query
          description: 'Nur Nutzer, deren **E-Mail-Adresse** `email` enthält, werden zurückgegeben.'
          schema:
            type: string
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        nutzerid:
                          type: integer
                          description: '**RowID des Nutzers**.'
                      required:
                        - nutzerid
                    - $ref: '#/components/schemas/nutzer'
    post:
      tags:
        - Anwender
      summary: Fügt einen Nutzer hinzu.
      description:
        Ein **Nutzer** wird mit den entsprechenden Werten hinzugefügt.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/nutzer'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
  /fans:
    get:
      tags:
        - Anwender
      summary: Gibt Fans zurück.
      description: 
        Alle **Fans** werden zurückgegeben. Falls Query-Parameter mit Werten
        angegeben wurden, wird die Rückgabe noch entsprechend gefiltert.
      parameters:
        - name: username
          in: query
          description: 'Nur Fans, deren **Username** `username` enthält, werden zurückgegeben.'
          schema:
            type: string
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        nutzerid:
                          type: integer
                          description: '**RowID des Nutzers**.'
                        fanid:
                          type: integer
                          description: '**RowID des Fan**.'
                      required:
                        - nutzerid
                        - fanid
                    - $ref: '#/components/schemas/nutzer'
                    - $ref: '#/components/schemas/fan'
    post:
      tags:
        - Anwender
      summary: Fügt einen Fan hinzu.
      description:
        Ein **Fan** wird mit den entsprechenden Werten hinzugefügt.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/nutzer'
                - $ref: '#/components/schemas/fan'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
  /mitarbeiter:
    get:
      tags:
        - Anwender
      summary: Gibt Mitarbeiter zurück.
      description: 
        Alle **Mitarbeiter** werden zurückgegeben. Falls Query-Parameter mit Werten
        angegeben wurden, wird die Rückgabe noch entsprechend gefiltert.
      parameters:
        - name: personalnummer
          in: query
          description: 'Nur Mitarbeiter, deren **Personalnummer** == `personalnummer` ist, werden zurückgegeben.'
          schema:
            type: integer
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        nutzerid:
                          type: integer
                          description: '**RowID des Nutzers**.'
                        mitarbeiterid:
                          type: integer
                          description: '**RowID des Mitarbeiters**.'
                      required:
                        - nutzerid
                        - mitarbeiterid
                    - $ref: '#/components/schemas/nutzer'
                    - $ref: '#/components/schemas/mitarbeiter'
    post:
      tags:
        - Anwender
      summary: Fügt einen Mitarbeiter hinzu.
      description:
        Ein **Mitarbeiter** wird mit den entsprechenden Werten hinzugefügt.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/nutzer'
                - $ref: '#/components/schemas/mitarbeiter'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
          
          
          
  /mannschaften:
    get:
      tags:
         - Anwender
      summary: Gibt Mannschaften zurück.
      description: 
        Alle **Mannschaften** werden zurückgegeben. Falls Query-Parameter mit Werten angegeben wurden, wird die Rückgabe noch entsprechend gefiltert.
      parameters:
        - name: name
          in: query
          description: 'Nur Mannschaften, deren **Name** `name` enthält, werden zurückgegeben.'
          schema:
            type: string
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        mannschaftid:
                          type: integer
                          description: '**RowID** der Mannschaft.'
                      required:
                        - mannschaftid
                    - $ref: '#/components/schemas/mannschaft'
  /spiele:
    get:
      tags:
         - Anwender
      summary: Gibt Spiele zurück.
      description: 
        Alle **Spiele** werden zurückgegeben. Falls Query-Parameter mit Werten angegeben wurden, wird die Rückgabe noch entsprechend gefiltert.
      parameters:
        - name: angeschaut
          in: query
          description: 'Nur Spiele, die von mindestens einem Premium-Nutzer angeschaut (**angeschaut** == `true`) bzw. nicht angeschaut (**angeschaut** == `false`) wurden, werden zurückgegeben.'
          schema:
            type: boolean
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        spielid:
                          type: integer
                          description: '**RowID des Spiels**.'
                      required:
                        - spielid
                    - $ref: '#/components/schemas/spiel'
    post:
      tags:
        - Authentifizierter und als Mitarbeiter authorisierter Anwender
      summary: Ein Spiel wird hinzugefügt.
      description: 
        Ein **Spiel** wird hinzugefügt.
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/spiel'
                - type: object
                  properties:
                    manschaft1id:
                      type: integer
                      description: '**RowID** der ersten Mannschaft.'
                    manschaft2id:
                      type: integer
                      description: '**RowID** der zweiten (gegnerischen) Mannschaft.'
                    ligaid:
                      type: integer
                      description: '**RowID** der zugeordneten Liga.'
                  required:
                    - manschaft1id
                    - manschaft2id
                    - ligaid
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403' 
  /ligen:
    get:
      tags:
         - Anwender
      summary: Gibt Ligen zurück.
      description: 
        Alle **Ligen** werden zurückgegeben.
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        ligaid:
                          type: integer
                          description: '**RowID der Liga**.'
                      required:
                        - ligaid
                    - $ref: '#/components/schemas/liga'
                    
                    
  /ligen/{ligaid}/spiele:
    get:
      tags:
        - Anwender
      summary: Gibt Spiele einer Liga zurück.
      description: 
        Alle **Spiele** einer **Liga** werden zurückgegeben.
      parameters:
        - name: ligaid
          in: path
          description: '**RowID** der Liga.'
          schema:
           type: integer
          required: true
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        spielid:
                          type: integer
                          description: '**RowID** des Spiels.'
                      required:
                        - verletzungid
                    - $ref: '#/components/schemas/spiel'
        '404':
          $ref: '#/components/responses/404'
  /spieler:
    get:
      tags:
         - Anwender
      summary: Gibt Spieler zurück.
      description: 
        Alle **Spieler** werden zurückgegeben. Falls Query-Parameter mit Werten angegeben wurden, wird die Rückgabe noch entsprechend gefiltert.
      parameters:
        - name: nachname
          in: query
          description: 'Nur Spieler, deren **Nachname** `nachname` enthält, werden zurückgegeben.'
          schema:
            type: string
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        spielerid:
                          type: integer
                          description: '**RowID des Spielers**.'
                      required:
                        - spielerid
                    - $ref: '#/components/schemas/spieler'
  /reportagen:
    get:
      tags:
        - Anwender
      summary: Gibt Reportagen zurück.
      description: 
        Alle **Reportagen** werden zurückgegeben.
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        reportageid:
                          type: integer
                          description: '**RowID der Reportage**.'
                      required:
                        - reportageid
                        - kompositionid
                    - $ref: '#/components/schemas/reportage'
    post:
      tags:
        - Authentifizierter und als Mitarbeiter authorisierter Anwender
      summary: Fügt eine Reportage hinzu.
      security:
        - basicAuth: []
      description: Eine **Reportage** wird hinzugefügt.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/reportage'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'

  /reportagen/{reportageid}:
    patch:
      tags:
        - Authentifizierter und als Mitarbeiter authorisierter Anwender
      security:
        - basicAuth: []
      summary: Ändert eine (eigene) Reportage.
      description: 
        Eine (eigene) **Reportage** wird gemäß der Request-Parameter geändert.
      parameters:
        - name: reportageid
          in: path
          description: '**RowID** der Reportage.'
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf:
                - type: object
                  properties:
                    ueberschrift:
                      type: string
                      description: '**Überschrift** der Reportage.'
                - type: object
                  properties:
                    text:
                      type: string
                      description: '**Text** der Reportage.'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - Authentifizierter und als Mitarbeiter authorisierter Anwender
      security:
        - basicAuth: []
      summary: Löscht eine (eigene) Reportage.
      description: 
        Eine (eigene) **Reportage** wird entfernt.
      parameters:
        - name: reportageid
          in: path
          description: '**RowID** der Reportage.'
          schema:
            type: integer
          required: true
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /spieler/{spielerid}/verletzungen:
    get:
      tags:
        - Anwender
      summary: Gibt die Verletzungen eines Spielers zurück.
      description: 
        Alle **Verletzungen** von einem **Spieler** werden zurückgegeben.
      parameters:
        - name: spielerid
          in: path
          description: '**RowID** des Spielers.'
          schema:
           type: integer
          required: true
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        verletzungid:
                          type: integer
                          description: '**RowID** der Verletzung.'
                      required:
                        - verletzungid
                    - $ref: '#/components/schemas/verletzung'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - Authentifizierter und als Mitarbeiter authorisierter Anwender
      summary: Fügt eine Verletzung zu einem Spieler hinzu.
      security:
        - basicAuth: []
      description: Eine **Verletzung** wird zu einem Spieler hinzugefügt.
      parameters:
      - name: spielerid
        in: path
        description: '**RowID** der Komposition.'
        schema:
          type: integer
        required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/verletzung'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /fans/{fanid}/mannschaft:
    get:
      tags:
        - Anwender
      summary: Gibt die vom Fan gefolgte Mannschaft zurück.
      description: 
        Die vom Fan **gefolgte Mannschaft** wird zurückgegeben.
      parameters:
        - name: fanid
          in: path
          description: '**RowID** des Fans.'
          schema:
           type: integer
          required: true
      responses:
        '200':
          description: '**OK**.'
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        mannschaftid:
                          type: integer
                          description: '**RowID** der Mannschaft.'
                      required:
                        - mannschaftid
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - Authentifizierter und als Fan authorisierter Anwender
      summary: Eine Mannschaft wird von einem Fan gefolgt.
      security:
        - basicAuth: []
      description: Die gewählte Mannschaft mit **MannschaftID** wird von dem authentifizierten Fan mit **FanID** gefolgt.
      parameters:
      - name: fanid
        in: path
        description: '**RowID** des Fans.'
        schema:
          type: integer
        required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf:
                - type: object
                  properties:
                    mannschaftid:
                      type: integer
                      description: '**RowID** der Mannschaft.'
                  required:
                    - mannschaftid
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - Authentifizierter und als Fan authorisierter Anwender
      security:
        - basicAuth: []
      summary: Ändert die gefolgte Mannschaft.
      description: 
        Die **gefolgte Mannschaft** wird durch eine **neue Mannschaft** ersetzt.
      parameters:
        - name: fanid
          in: path
          description: '**RowID** des Fans.'
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf:
                - type: object
                  properties:
                    mannschaftid:
                      type: integer
                      description: '**RowID** der neuen Mannschaft.'
                  required:
                    - mannschaftid
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  responses:
    '201':
      description: '**Created**.'
      headers:
        Location:
          description: Die URL der neuen Ressource. Siehe hierzu auch die Anmerkung bzgl. fiktiver Links im ersten Abschnitt.
          schema:
            type: string
    '204':
      description: '**No Content**.'
    '301':
      description: '**Moved Permanently**.'
      headers:
        Location:
          description: Die URL der Ressource.
          schema:
            type: string
    '400':
      description: '**Bad Request**.'
    '401':
      description: '**Unauthorized**.'
      headers:
        WWW-Authenticate:
          schema:
            type: string
    '403':
      description: '**Forbidden**.'
    '404':
      description: '**Not Found**.'
  schemas:
    nutzer:
      type: object
      properties:
        email:
          type: string
          description: '**E-Mail-Adresse** des Nutzers.'
        passwort:
          type: string
          description: '**Passwort** des Nutzers.'
      required:
        - email
        - passwort
    fan:
      type: object
      properties:
        username:
          type: string
          description: '**Username** des Fans.'
      required:
        - username
    premiumnutzer:
      type: object
      properties:
        ablaufdatum:
          type: string
          format: date
          description: '**Ablaufdatum** des Premiumnutzers (in der Form "YYYY-MM-DD").'
      required:
        - ablaufdatum
    mitarbeiter:
      type: object
      properties:
        personalnummer:
          type: integer
          description: '**Personalnummer** des Mitarbeiters.'
      required:
        - personalnummer
    spiel:
      type: object
      properties:
        link:
          type: string
          description: '**Link** des Spiels.'
        datum:
          type: string
          format: date
          description: '**Datum** des Spiels (in der Form "YYYY-MM-DD").'
      required:
        - link
        - datum
    spieler:
      type: object
      properties:
        vorname:
          type: string
          description: '**Vorname** des Spielers.'
        nachname:
          type: string
          description: '**Nachname** des Spielers.'
        spitzname:
          type: string
          description: '**Spitzname** des Spielers.'
      required:
        - vorname
        - nachname
    reportage:
      type: object
      properties:
        ueberschrift:
          type: string
          description: '**Überschrift** der Reportage.'
        text:
          type: string
          description: '**Text** der Reportage.'
      required:
        - ueberschrift
        - text
    verletzung:
      type: object
      properties:
        art:
          type: string
          description: '**Art** der Verletzung.'
        dauer:
          type: integer
          description: '**Dauer** der Verletzung.'
      required:
        - art
        - dauer
    mannschaft:
      type: object
      properties:
        name:
          type: string
          description: '**Name** der Mannschaft.'
      required:
        - name
    bild:
      type: object
      properties:
        pfad:
          type: string
          description: '**Pfad** zum Bild.'
      required:
        - pfad
    liga:
      type: object
      properties:
        name:
          type: string
          description: '**Name** der Liga.'
      required:
        - liga
        - name
    spielwert:
      type: object
      properties:
        feldzeit:
          type: integer
          description: '**Feldzeit** des Spielwerts.'
        ballbesitz:
          type: integer
          description: '**Ballbesitzzeit** des Spielwerts.'
        schussanzahl:
          type: integer
          description: '**Schussanzahl** des Spielwerts.' 
        distanz:
          type: integer
          description: '**Distanz** des Spielwerts.' 
      required:
        - feldzeit
        - ballbesitz
        - schussanzahl
        - distanz
